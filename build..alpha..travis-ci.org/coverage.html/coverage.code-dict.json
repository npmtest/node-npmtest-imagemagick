{"/home/travis/build/npmtest/node-npmtest-imagemagick/test.js":"/* istanbul instrument in package npmtest_imagemagick */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-imagemagick/lib.npmtest_imagemagick.js":"/* istanbul instrument in package npmtest_imagemagick */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_imagemagick = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_imagemagick = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-imagemagick/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-imagemagick && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_imagemagick */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_imagemagick\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_imagemagick.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_imagemagick.rollup.js'] =\n            local.assetsDict['/assets.npmtest_imagemagick.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_imagemagick.__dirname +\n                    '/lib.npmtest_imagemagick.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-imagemagick/imagemagick/imagemagick.js":"var childproc = require('child_process'),\n    EventEmitter = require('events').EventEmitter;\n\n\nfunction exec2(file, args /*, options, callback */) {\n  var options = { encoding: 'utf8'\n                , timeout: 0\n                , maxBuffer: 500*1024\n                , killSignal: 'SIGKILL'\n                , output: null\n                };\n\n  var callback = arguments[arguments.length-1];\n  if ('function' != typeof callback) callback = null;\n\n  if (typeof arguments[2] == 'object') {\n    var keys = Object.keys(options);\n    for (var i = 0; i < keys.length; i++) {\n      var k = keys[i];\n      if (arguments[2][k] !== undefined) options[k] = arguments[2][k];\n    }\n  }\n\n  var child = childproc.spawn(file, args);\n  var killed = false;\n  var timedOut = false;\n\n  var Wrapper = function(proc) {\n    this.proc = proc;\n    this.stderr = new Accumulator();\n    proc.emitter = new EventEmitter();\n    proc.on = proc.emitter.on.bind(proc.emitter);\n    this.out = proc.emitter.emit.bind(proc.emitter, 'data');\n    this.err = this.stderr.out.bind(this.stderr);\n    this.errCurrent = this.stderr.current.bind(this.stderr);\n  };\n  Wrapper.prototype.finish = function(err) {\n    this.proc.emitter.emit('end', err, this.errCurrent());\n  };\n\n  var Accumulator = function(cb) {\n    this.stdout = {contents: \"\"};\n    this.stderr = {contents: \"\"};\n    this.callback = cb;\n\n    var limitedWrite = function(stream) {\n      return function(chunk) {\n        stream.contents += chunk;\n        if (!killed && stream.contents.length > options.maxBuffer) {\n          child.kill(options.killSignal);\n          killed = true;\n        }\n      };\n    };\n    this.out = limitedWrite(this.stdout);\n    this.err = limitedWrite(this.stderr);\n  };\n  Accumulator.prototype.current = function() { return this.stdout.contents; };\n  Accumulator.prototype.errCurrent = function() { return this.stderr.contents; };\n  Accumulator.prototype.finish = function(err) { this.callback(err, this.stdout.contents, this.stderr.contents); };\n\n  var std = callback ? new Accumulator(callback) : new Wrapper(child);\n\n  var timeoutId;\n  if (options.timeout > 0) {\n    timeoutId = setTimeout(function () {\n      if (!killed) {\n        child.kill(options.killSignal);\n        timedOut = true;\n        killed = true;\n        timeoutId = null;\n      }\n    }, options.timeout);\n  }\n\n  child.stdout.setEncoding(options.encoding);\n  child.stderr.setEncoding(options.encoding);\n\n  child.stdout.addListener(\"data\", function (chunk) { std.out(chunk, options.encoding); });\n  child.stderr.addListener(\"data\", function (chunk) { std.err(chunk, options.encoding); });\n\n  var version = process.versions.node.split('.');\n  child.addListener(version[0] == 0 && version[1] < 7 ? \"exit\" : \"close\", function (code, signal) {\n    if (timeoutId) clearTimeout(timeoutId);\n    if (code === 0 && signal === null) {\n      std.finish(null);\n    } else {\n      var e = new Error(\"Command \"+(timedOut ? \"timed out\" : \"failed\")+\": \" + std.errCurrent());\n      e.timedOut = timedOut;\n      e.killed = killed;\n      e.code = code;\n      e.signal = signal;\n      std.finish(e);\n    }\n  });\n\n  return child;\n};\n\n\nfunction parseIdentify(input) {\n  var lines = input.split(\"\\n\"),\n      prop = {},\n      props = [prop],\n      prevIndent = 0,\n      indents = [indent],\n      currentLine, comps, indent, i;\n\n  lines.shift(); //drop first line (Image: name.jpg)\n\n  for (i in lines) {\n    currentLine = lines[i];\n    indent = currentLine.search(/\\S/);\n    if (indent >= 0) {\n      comps = currentLine.split(': ');\n      if (indent > prevIndent) indents.push(indent);\n      while (indent < prevIndent && props.length) {\n        indents.pop();\n        prop = props.pop();\n        prevIndent = indents[indents.length - 1];\n      }\n      if (comps.length < 2) {\n        props.push(prop);\n        prop = prop[currentLine.split(':')[0].trim().toLowerCase()] = {};\n      } else {\n        prop[comps[0].trim().toLowerCase()] = comps[1].trim()\n      }\n      prevIndent = indent;\n    }\n  }\n  return prop;\n};\n\nexports.identify = function(pathOrArgs, callback) {\n  var isCustom = Array.isArray(pathOrArgs),\n      isData,\n      args = isCustom ? ([]).concat(pathOrArgs) : ['-verbose', pathOrArgs];\n\n  if (typeof args[args.length-1] === 'object') {\n    isData = true;\n    pathOrArgs = args[args.length-1];\n    args[args.length-1] = '-';\n    if (!pathOrArgs.data)\n      throw new Error('first argument is missing the \"data\" member');\n  } else if (typeof pathOrArgs === 'function') {\n    args[args.length-1] = '-';\n    callback = pathOrArgs;\n  }\n  var proc = exec2(exports.identify.path, args, {timeout:120000}, function(err, stdout, stderr) {\n    var result, geometry;\n    if (!err) {\n      if (isCustom) {\n        result = stdout;\n      } else {\n        result = parseIdentify(stdout);\n        geometry = result['geometry'].split(/x/);\n\n        result.format = result.format.match(/\\S*/)[0]\n        result.width = parseInt(geometry[0]);\n        result.height = parseInt(geometry[1]);\n        result.depth = parseInt(result.depth);\n        if (result.quality !== undefined) result.quality = parseInt(result.quality) / 100;\n      }\n    }\n    callback(err, result);\n  });\n  if (isData) {\n    if ('string' === typeof pathOrArgs.data) {\n      proc.stdin.setEncoding('binary');\n      proc.stdin.write(pathOrArgs.data, 'binary');\n      proc.stdin.end();\n    } else {\n      proc.stdin.end(pathOrArgs.data);\n    }\n  }\n  return proc;\n}\nexports.identify.path = 'identify';\n\nfunction ExifDate(value) {\n  // YYYY:MM:DD HH:MM:SS -> Date(YYYY-MM-DD HH:MM:SS +0000)\n  value = value.split(/ /);\n  return new Date(value[0].replace(/:/g, '-')+' '+\n    value[1]+' +0000');\n}\n\nfunction exifKeyName(k) {\n  return k.replace(exifKeyName.RE, function(x){\n    if (x.length === 1) return x.toLowerCase();\n    else return x.substr(0,x.length-1).toLowerCase()+x.substr(x.length-1);\n  });\n}\nexifKeyName.RE = /^[A-Z]+/;\n\nvar exifFieldConverters = {\n  // Numbers\n  bitsPerSample:Number, compression:Number, exifImageLength:Number,\n  exifImageWidth:Number, exifOffset:Number, exposureProgram:Number,\n  flash:Number, imageLength:Number, imageWidth:Number, isoSpeedRatings:Number,\n  jpegInterchangeFormat:Number, jpegInterchangeFormatLength:Number,\n  lightSource:Number, meteringMode:Number, orientation:Number,\n  photometricInterpretation:Number, planarConfiguration:Number,\n  resolutionUnit:Number, rowsPerStrip:Number, samplesPerPixel:Number,\n  sensingMethod:Number, stripByteCounts:Number, subSecTime:Number,\n  subSecTimeDigitized:Number, subSecTimeOriginal:Number, customRendered:Number,\n  exposureMode:Number, focalLengthIn35mmFilm:Number, gainControl:Number,\n  saturation:Number, sharpness:Number, subjectDistanceRange:Number,\n  subSecTime:Number, subSecTimeDigitized:Number, subSecTimeOriginal:Number,\n  whiteBalance:Number, sceneCaptureType:Number,\n\n  // Dates\n  dateTime:ExifDate, dateTimeDigitized:ExifDate, dateTimeOriginal:ExifDate\n};\n\nexports.readMetadata = function(path, callback) {\n  return exports.identify(['-format', '%[EXIF:*]', path], function(err, stdout) {\n    var meta = {};\n    if (!err) {\n      stdout.split(/\\n/).forEach(function(line){\n        var eq_p = line.indexOf('=');\n        if (eq_p === -1) return;\n        var key = line.substr(0, eq_p).replace('/','-'),\n            value = line.substr(eq_p+1).trim(),\n            typekey = 'default';\n        var p = key.indexOf(':');\n        if (p !== -1) {\n          typekey = key.substr(0, p);\n          key = key.substr(p+1);\n          if (typekey === 'exif') {\n            key = exifKeyName(key);\n            var converter = exifFieldConverters[key];\n            if (converter) value = converter(value);\n          }\n        }\n        if (!(typekey in meta)) meta[typekey] = {key:value};\n        else meta[typekey][key] = value;\n      })\n    }\n    callback(err, meta);\n  });\n}\n\nexports.convert = function(args, timeout, callback) {\n  var procopt = {encoding: 'binary'};\n  if (typeof timeout === 'function') {\n    callback = timeout;\n    timeout = 0;\n  } else if (typeof timeout !== 'number') {\n    timeout = 0;\n  }\n  if (timeout && (timeout = parseInt(timeout)) > 0 && !isNaN(timeout))\n    procopt.timeout = timeout;\n  return exec2(exports.convert.path, args, procopt, callback);\n}\nexports.convert.path = 'convert';\n\nvar resizeCall = function(t, callback) {\n  var proc = exports.convert(t.args, t.opt.timeout, callback);\n  if (t.opt.srcPath.match(/-$/)) {\n    if ('string' === typeof t.opt.srcData) {\n      proc.stdin.setEncoding('binary');\n      proc.stdin.write(t.opt.srcData, 'binary');\n      proc.stdin.end();\n    } else {\n      proc.stdin.end(t.opt.srcData);\n    }\n  }\n  return proc;\n}\n\nexports.resize = function(options, callback) {\n  var t = exports.resizeArgs(options);\n  return resizeCall(t, callback)\n}\n\nexports.crop = function (options, callback) {\n  if (typeof options !== 'object')\n    throw new TypeError('First argument must be an object');\n  if (!options.srcPath && !options.srcData)\n    throw new TypeError(\"No srcPath or data defined\");\n  if (!options.height && !options.width)\n    throw new TypeError(\"No width or height defined\");\n  \n  if (options.srcPath){\n    var args = options.srcPath;\n  } else {\n    var args = {\n      data: options.srcData\n    };\n  }\n\n  exports.identify(args, function(err, meta) {\n    if (err) return callback && callback(err);\n    var t         = exports.resizeArgs(options),\n        ignoreArg = false,\n        printNext  = false,\n        args      = [];\n    t.args.forEach(function (arg) {\n      if (printNext === true){\n        console.log(\"arg\", arg);\n        printNext = false;\n      }\n      // ignoreArg is set when resize flag was found\n      if (!ignoreArg && (arg != '-resize'))\n        args.push(arg);\n      // found resize flag! ignore the next argument\n      if (arg == '-resize'){\n        console.log(\"resize arg\");\n        ignoreArg = true;\n        printNext = true;\n      }\n      if (arg === \"-crop\"){\n        console.log(\"crop arg\");\n        printNext = true;\n      }\n      // found the argument after the resize flag; ignore it and set crop options\n      if ((arg != \"-resize\") && ignoreArg) {\n        var dSrc      = meta.width / meta.height,\n            dDst      = t.opt.width / t.opt.height,\n            resizeTo  = (dSrc < dDst) ? ''+t.opt.width+'x' : 'x'+t.opt.height,\n            dGravity  = options.gravity ? options.gravity : \"Center\";\n        args = args.concat([\n          '-resize', resizeTo,\n          '-gravity', dGravity,\n          '-crop', ''+t.opt.width + 'x' + t.opt.height + '+0+0',\n          '+repage'\n        ]);\n        ignoreArg = false;\n      }\n    })\n\n    t.args = args;\n    resizeCall(t, callback);\n  })\n}\n\nexports.resizeArgs = function(options) {\n  var opt = {\n    srcPath: null,\n    srcData: null,\n    srcFormat: null,\n    dstPath: null,\n    quality: 0.8,\n    format: 'jpg',\n    progressive: false,\n    colorspace: null,\n    width: 0,\n    height: 0,\n    strip: true,\n    filter: 'Lagrange',\n    sharpening: 0.2,\n    customArgs: [],\n    timeout: 0\n  }\n\n  // check options\n  if (typeof options !== 'object')\n    throw new Error('first argument must be an object');\n  for (var k in opt) if (k in options) opt[k] = options[k];\n  if (!opt.srcPath && !opt.srcData)\n    throw new Error('both srcPath and srcData are empty');\n\n  // normalize options\n  if (!opt.format) opt.format = 'jpg';\n  if (!opt.srcPath) {\n    opt.srcPath = (opt.srcFormat ? opt.srcFormat +':-' : '-'); // stdin\n  }\n  if (!opt.dstPath)\n    opt.dstPath = (opt.format ? opt.format+':-' : '-'); // stdout\n  if (opt.width === 0 && opt.height === 0)\n    throw new Error('both width and height can not be 0 (zero)');\n\n  // build args\n  var args = [opt.srcPath];\n  if (opt.sharpening > 0) {\n    args = args.concat([\n      '-set', 'option:filter:blur', String(1.0-opt.sharpening)]);\n  }\n  if (opt.filter) {\n    args.push('-filter');\n    args.push(opt.filter);\n  }\n  if (opt.strip) {\n    args.push('-strip');\n  }\n  if (opt.width || opt.height) {\n    args.push('-resize');\n    if (opt.height === 0) args.push(String(opt.width));\n    else if (opt.width === 0) args.push('x'+String(opt.height));\n    else args.push(String(opt.width)+'x'+String(opt.height));\n  }\n  opt.format = opt.format.toLowerCase();\n  var isJPEG = (opt.format === 'jpg' || opt.format === 'jpeg');\n  if (isJPEG && opt.progressive) {\n    args.push('-interlace');\n    args.push('plane');\n  }\n  if (isJPEG || opt.format === 'png') {\n    args.push('-quality');\n    args.push(Math.round(opt.quality * 100.0).toString());\n  }\n  else if (opt.format === 'miff' || opt.format === 'mif') {\n    args.push('-quality');\n    args.push(Math.round(opt.quality * 9.0).toString());\n  }\n  if (opt.colorspace) {\n    args.push('-colorspace');\n    args.push(opt.colorspace);\n  }\n  if (Array.isArray(opt.customArgs) && opt.customArgs.length)\n    args = args.concat(opt.customArgs);\n  args.push(opt.dstPath);\n\n  return {opt:opt, args:args};\n}\n"}